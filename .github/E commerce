Creating an API for an ecommerce platform admin to manage product inventory using Node.js and MongoDB involves defining models/schemas, implementing routes, and using controllers. Here's a beginner-level guide to accomplish this task:

Step 1: Set up your Node.js project

Create a new directory for your project.
Open a terminal, navigate to the project directory, and run npm init to set up your Node.js project. Follow the prompts to create a package.json file.
Install necessary dependencies:
bash
Copy code
npm install express mongoose body-parser
Create the following project structure:
markdown
Copy code
- /models
  - product.js
- /controllers
  - productController.js
- /routes
  - productRoutes.js
- app.js
- README.md
Step 2: Define Product Model (/models/product.js)

javascript
Copy code
const mongoose = require('mongoose');

const productSchema = new mongoose.Schema({
  name: String,
  quantity: Number,
});

module.exports = mongoose.model('Product', productSchema);
Step 3: Create Routes (/routes/productRoutes.js)

javascript
Copy code
const express = require('express');
const router = express.Router();
const productController = require('../controllers/productController');

// Create a product
router.post('/create', productController.createProduct);

// List products
router.get('/', productController.listProducts);

// Delete a product
router.delete('/:id', productController.deleteProduct);

// Update quantity of a product
router.post('/:id/update_quantity', productController.updateQuantity);

module.exports = router;
Step 4: Implement Controllers (/controllers/productController.js)

javascript
Copy code
const Product = require('../models/product');

// Create a product
exports.createProduct = async (req, res) => {
  try {
    const { name, quantity } = req.body;
    const product = new Product({ name, quantity });
    await product.save();
    res.json({ product });
  } catch (error) {
    res.status(500).json({ error: 'Error creating the product' });
  }
};

// List products
exports.listProducts = async (req, res) => {
  try {
    const products = await Product.find();
    res.json({ products });
  } catch (error) {
    res.status(500).json({ error: 'Error listing products' });
  }
};

// Delete a product
exports.deleteProduct = async (req, res) => {
  try {
    await Product.findByIdAndRemove(req.params.id);
    res.json({ message: 'Product deleted' });
  } catch (error) {
    res.status(500).json({ error: 'Error deleting the product' });
  }
};

// Update quantity of a product
exports.updateQuantity = async (req, res) => {
  try {
    const { id } = req.params;
    const { number } = req.query;
    const product = await Product.findById(id);
    if (!product) {
      return res.status(404).json({ error: 'Product not found' });
    }
    product.quantity += parseInt(number, 10);
    await product.save();
    res.json({ product, message: 'Updated successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Error updating the product' });
  }
};
Step 5: Set Up Express App (/app.js)

javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const productRoutes = require('./routes/productRoutes');

const app = express();
const port = process.env.PORT || 3000;

mongoose.connect('mongodb://localhost/your-database-name', { useNewUrlParser: true, useUnifiedTopology: true });

app.use(bodyParser.json());
app.use('/products', productRoutes);

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
Step 6: Create a README (/README.md
